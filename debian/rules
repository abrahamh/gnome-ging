#!/usr/bin/make -f
# Sample debian/rules that uses debhelper.
# GNU copyright 1997 to 1999 by Joey Hess.
# adapted for gnome-ding 2004 by Heiko Abraham

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# This is the debhelper compatability version to use.
export DH_COMPAT=2

version=`less ../configure.in  | grep 'VERSION=' | sed 's/^.*VERSION=\"//' | sed 's/\"$//'`
major='1'

# These are used for cross-compiling and for saving the configure script
# from having to guess our platform (since we know it already)
DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)


ifneq (,$(findstring debug,$(DEB_BUILD_OPTIONS)))
        CFLAGS += -g
endif
INSTALL_TARGET := install
BUILD_TARGET := all
ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
        INSTALL_TARGET := install-debug
        BUILD_TARGET := debug
endif

DEB_HOST_GNU_OPTION := 
# the "optimize" flag disables compatibility hacks
ifeq (,$(findstring optimize,$(DEB_BUILD_OPTIONS)))
 $(warning trying to disable machine-specific optimizations)
 $(warning add 'optimize' to DEB_BUILD_OPTIONS to enable them)
 DEB_HOST_GNU_TYPE := \
  $(sehll echo $(DEB_HOST_GNU_TYPE)|sed -e 's/^alphaev56/alpha/')
 DEB_BUILD_GNU_TYPE := \
  $(shell echo $(DEB_BUILD_GNU_TYPE)|sed -e 's/^alphaev56/alpha/')
 #on intel architectures, xine probes CPU specific optimizations on runtime
 DEB_HOST_GNU_TYPE := \
  $(shell echo $(DEB_HOST_GNU_TYPE)|sed -e 's/^i.86/i686/')
 DEB_BUILD_GNU_TYPE := \
  $(shell echo $(DEB_BUILD_GNU_TYPE)|sed -e 's/^i.86/i686/')
 ifneq ($DEB_HOST_GNU_TYPE,$DEB_BUILD_GNU_TYPE)
  $(warning WARNING: cross compiling is not supported by xine)
  $(warning          using DEB_BUILD_GNU_TYPE = $(DEB_BUILD_GNU_TYPE))
  $(warning          ignoring DEB_HOST_GNU_TYPE = $(DEB_HOST_GNU_TYPE))
  DEB_HOST_GNU_TYPE := $(DEB_BUILD_GNU_TYPE)
 endif
 DEB_HOST_GNU_OPTION := --host=$(DEB_HOST_GNU_TYPE)
endif


configure: configure-stamp
configure-stamp:
	dh_testdir
	./configure --prefix=/usr  --enable-aspell \
                    $(DEB_HOST_GNU_OPTION)
	touch configure-stamp

build: configure-stamp build-stamp
build-stamp:
	dh_testdir

	$(MAKE)

	touch build-stamp

clean:
	dh_testdir
	dh_testroot
	rm -f build-stamp configure-stamp
	test -f Makefile && $(MAKE) distclean || true
	dh_clean

install: build
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs

	$(MAKE) install prefix=$(CURDIR)/debian/gnome-ding/usr 

binary-indep: build install
# We have nothing architecture-independant to do.
 

binary-arch: build install
	dh_testversion 2
	dh_testdir
	dh_testroot
	#
	# build gnome-ding${major} package by moving files from gnome-ding-dev
	#
	# dh_movefiles --sourcedir=debian/gnome-ding -pgnome-ding$(major)  \
	# usr/lib/gnome-ding*.so.$(major)       \
	# usr/share/dict                      \
	# usr/share/locale

#	dh_installdebconf	
	dh_installdocs
	dh_installexamples
	dh_installmenu
	dh_installchangelogs -k ChangeLog
	dh_link
	dh_strip
	dh_compress
	dh_fixperms
#	dh_makeshlibs -V 'gnome-ding (>= 2.0)'
	dh_installdeb
#	dh_shlibdeps
#	chmod +x debian/shlibdeps.sh
#	debian/shlibdeps.sh libxine${major}
	dh_gencontrol
	dh_md5sums
	dh_builddeb

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install configure
